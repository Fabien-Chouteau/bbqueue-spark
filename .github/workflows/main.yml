name: Build and test
on: [pull_request, push]

jobs:
  linux-build:
    name: Build and test on Linux
    strategy:
      matrix:
        os: [ubuntu-latest] # [macos-latest, windows-latest, ubuntu-latest]
        gnat_version: [^10, ^11]
        gprbuild_version: [^21]
    runs-on: ${{ matrix.os }}
    env:
      BBQUEUE_COMPILE_CHECKS: enabled
      BBQUEUE_RUNTIME_CHECKS: enabled
      BBQUEUE_STYLE_CHECKS: enabled
      BBQUEUE_CONTRACTS: enabled

    steps:
    - uses: actions/checkout@v1
    - uses: ada-actions/toolchain@ce2020
      with:
        distrib: community
    - uses: alire-project/setup-alire@v1
      with:
        branch: "master"
        toolchain: gprbuild${{ matrix.gprbuild_version }} gnat_native${{ matrix.gnat_version }} --disable-assistant

    - uses: reviewdog/action-setup@v1

    - name: Alire build
      run: alr build

    - name: Test Build
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd tests/
        status=0
        alr -q build > output.txt 2>&1 || status=$?
        cat output.txt
        cat output.txt | reviewdog -efm="%f:%l:%c: %m" -diff="git diff master" --reporter=github-pr-review
        # Check for errors
        if [ $status -ne 0 ]; then
           echo "ERROR: gprbuild returned $status"
           # This will cause the workflow to exit with $status
           bash -c "exit $status"
        fi
    - name: SPARK proof
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd tests/
        status=0
        alr exec -- gnatprove -Ptests/tests.gpr -j0 --level=4 --checks-as-errors -cargs -gnatef > output.txt 2>&1 || status=$?
        cat output.txt
        cat output.txt | reviewdog -efm="%f:%l:%c: %m" -diff="git diff master" --reporter=github-pr-review
        # Check for errors
        if [ $status -ne 0 ]; then
           echo "ERROR: gnatprove returned $status"
           # This will cause the workflow to exit with $status
           bash -c "exit $status"
        fi
    - run: ./tests/obj/main_offsets
    - run: ./tests/obj/main_buffer
    - run: ./tests/obj/main_framed
